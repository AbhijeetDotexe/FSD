const express = require('express');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const app = express();
const port = 3000;

// Configure Passport.js local strategy for user authentication
passport.use(
  new LocalStrategy((username, password, done) => {
    // Replace this with your own logic to fetch user from database
    const user = { id: 1, username: 'admin', password: '$2b$10$UkCKT...' };

    // Check if the username exists
    if (!user) {
      return done(null, false, { message: 'Incorrect username' });
    }

    // Compare the password with the stored hash
    bcrypt.compare(password, user.password, (err, result) => {
      if (err) {
        return done(err);
      }
      if (!result) {
        return done(null, false, { message: 'Incorrect password' });
      }

      // Authentication successful
      return done(null, user);
    });
  })
);

// Serialize and deserialize user object
passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  // Replace this with your own logic to fetch user from database using the ID
  const user = { id: 1, username: 'admin' };
  done(null, user);
});

// Express middleware for parsing JSON request bodies
app.use(express.json());

// Initialize Passport.js and session support
app.use(passport.initialize());
app.use(passport.session());

// Route for user login
app.post('/login', (req, res, next) => {
  passport.authenticate('local', { session: false }, (err, user, info) => {
    if (err || !user) {
      return res.status(401).json({ message: info.message });
    }

    // Generate a JSON Web Token (JWT) for the authenticated user
    const token = jwt.sign({ userId: user.id }, 'your-secret-key');

    // Return the token in the response
    return res.json({ token });
  })(req, res, next);
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
